version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rural-producer-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME:-rural_admin}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE:-rural_producer_db}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:13-alpine
    container_name: rural-producer-db
    environment:
      - POSTGRES_USER=${DB_USERNAME:-rural_admin}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-SuaSenhaSuperSegura456!}
      - POSTGRES_DB=${DB_DATABASE:-rural_producer_db}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-rural_admin} -d ${DB_DATABASE:-rural_producer_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: rural-producer-redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
